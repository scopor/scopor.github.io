<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on Sanoon</title><link>https://sanoon.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on Sanoon</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 04 Jan 2021 14:48:54 +0800</lastBuildDate><atom:link href="https://sanoon.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>详解工厂模式-工厂方法</title><link>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 04 Jan 2021 14:48:54 +0800</pubDate><guid>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</guid><description>工厂方法模式(Factory Method Pattern)，又叫做多态工厂模式(Polymorphic Factory)，和简单工厂的区别在于，可以在不用修改工厂类的情况下完成新品的增加，更加符合 开闭原则。工厂父类</description></item><item><title>详解工厂模式-简单工厂</title><link>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</link><pubDate>Mon, 04 Jan 2021 10:10:45 +0800</pubDate><guid>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</guid><description>工厂模式 工厂模式属于创建型模式，主要分为简单工厂、工厂方法以及抽象工厂三种类型，其核心思想是针对接口的不同实现类的实例化，即不同条件下，创建不同的子类。 简单工厂 简单工厂又叫做静态工厂（Static Factory M</description></item><item><title>SOLID 原则</title><link>https://sanoon.me/posts/SOLID%E5%8E%9F%E5%88%99/</link><pubDate>Mon, 27 Apr 2020 23:29:12 +0800</pubDate><guid>https://sanoon.me/posts/SOLID%E5%8E%9F%E5%88%99/</guid><description>六大原则 设计模式有六大原则，分别是： 单一职责：Single Responsibility Principle 开闭原则：Open Closed Principle 里氏替换：Liskov Substitution Principle 迪米特法则：Law of Demeter 接口隔离：Interface Segregation Principle 依赖倒置：Dependence Inversion Principle 它</description></item><item><title>详解单例模式</title><link>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 15 Apr 2020 10:08:59 +0800</pubDate><guid>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>单例模式 什么是单例，顾名思义，只允许有一个实例。使用场景常见的有数据库连接池、多线程的线程池等。总之 JVM 中只允许存在一个对象实例的都可以选择单例模式。那单例模式的实现方式都有哪些呢？请看详解。 饿汉式 饿汉</description></item></channel></rss>