<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kafka on Sanoon with Lemon</title><link>https://sanoon.me/tags/kafka/</link><description>Recent content in Kafka on Sanoon with Lemon</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 16 May 2020 23:24:13 +0800</lastBuildDate><atom:link href="https://sanoon.me/tags/kafka/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring-boot 集成 Kafka</title><link>https://sanoon.me/posts/spring-boot-%E9%9B%86%E6%88%90-kafka/</link><pubDate>Sat, 16 May 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/spring-boot-%E9%9B%86%E6%88%90-kafka/</guid><description>POM 引入 Spring-boot-kafka &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.kafka&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-kafka&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 创建启动类 @SpringBootApplication public class KafkaApplication { public static void main(String[] args) { SpringApplication.run(KafkaApplication.class, args); } } 创建生产者配置类 @Configuration public class ProducerConfiguration { public ProducerConfiguration() { } @Bean public Map&amp;lt;String, Object&amp;gt; producerConfigs() { HashMap&amp;lt;String, Object&amp;gt; props = new HashMap&amp;lt;&amp;gt;(); props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, &amp;quot;localhost:9092&amp;quot;); props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class); props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class); props.put(ProducerConfig.MAX_BLOCK_MS_CONFIG, 5000); return props; } @Bean public ProducerFactory&amp;lt;String, String&amp;gt; producerFactory() { return new DefaultKafkaProducerFactory&amp;lt;&amp;gt;(producerConfigs()); } @Bean public KafkaTemplate&amp;lt;String, String&amp;gt; kafkaTemplate() { return new KafkaTemplate&amp;lt;&amp;gt;(producerFactory()); } @Bean public Producer sender() { return new Producer(); } } 创</description></item><item><title>Kafka 安装笔记</title><link>https://sanoon.me/posts/kafka-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 15 May 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/kafka-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</guid><description>安装 wget http://mirror.bit.edu.cn/apache/kafka/0.11.0.2/kafka_2.11-0.11.0.2.tgz tar -zxvf kafka_2.11-0.11.0.2.tgz mv kafka_2.11-1.0.0 kafka cd kafka 配置 查看默认配置，cat config/server.properties broker.id=0 num.network.threads=3 num.io.threads=8 socket.send.buffer.bytes=102400 socket.receive.buffer.bytes=102400 socket.request.max.bytes=104857600 log.dirs=/tmp/kafka-logs num.partitions=1 num.recovery.threads.per.data.dir=1 offsets.topic.replication.factor=1 transaction.state.log.replication.factor=1 transaction.state.log.min.isr=1 log.retention.hours=168 log.segment.bytes=1073741824 log.retention.check.interval.ms=300000 zookeeper.connect=localhost:2181 zookeeper.connection.timeout.ms=6000 group.initial.rebalance.delay.ms=0 部署 启动 KafKa 之前，需要先启动 Zookeeper，参见 Zookeeper 安装笔记 后台启动 ./bin/kafka-server-start.sh --deamon config/server.properties 创建 Topic ./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test 查看 Topic ./bin/kafka-topics.sh --list --zookeeper localhost:2181</description></item><item><title>从零开始搭建 zookeeper 和 Kafka 集群</title><link>https://sanoon.me/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-kafka-%E9%9B%86%E7%BE%A4/</link><pubDate>Fri, 15 May 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-kafka-%E9%9B%86%E7%BE%A4/</guid><description>安装 jdk 下载安装 jdk cd /data wget --no-cookies --no-check-certificate --header &amp;quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&amp;quot; &amp;quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&amp;quot; tar -zxvf jdk-8u141-linux-x64.tar.gz mv jdk1.8.0_141/ jdk 设置环境变量 vi 编辑 /etc/profile，写入以下信息并 :wq! 保存，执行 source /etc/profile 命令，使其生效，执行 java -version 查看是否配置成功 JAVA_HOME=/data/jdk JRE_HOME=/data/jdk/jre CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export JAVA_HOME JRE_HOME CLASS_PATH PATH 搭建 zookeeper 集群 下载安装 zookeeper</description></item><item><title>Kafka 入门</title><link>https://sanoon.me/posts/kafka-%E5%85%A5%E9%97%A8/</link><pubDate>Thu, 14 May 2020 21:34:47 +0800</pubDate><guid>https://sanoon.me/posts/kafka-%E5%85%A5%E9%97%A8/</guid><description>概述 定义 Kafka 是一个分布式流处理框架。 特性 实现消息的发布/订阅 存储流消息 实时流处理 核心 API The Producer API：允许生产者发布消息到一个或者多个 TOPIC The Consumer API：允许消费者消费一个或者多个 TOPIC，并对接收到的消息进行</description></item></channel></rss>