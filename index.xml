<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sanoon with Lemon</title><link>https://sanoon.me/</link><description>Recent content on Sanoon with Lemon</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 09 Oct 2020 05:06:41 +0800</lastBuildDate><atom:link href="https://sanoon.me/index.xml" rel="self" type="application/rss+xml"/><item><title>Windows Terminal 配置 Git Bash</title><link>https://sanoon.me/posts/windowsterminal%E9%85%8D%E7%BD%AEgitbash/</link><pubDate>Fri, 09 Oct 2020 05:06:41 +0800</pubDate><guid>https://sanoon.me/posts/windowsterminal%E9%85%8D%E7%BD%AEgitbash/</guid><description>Windows Terminal 是 Windows 下常用的终端工具，相较于其提供的 Windows 的命令，开发者更喜欢使用 Linux 命令来操作，因此本文介绍如何在 Windows Terminal 上配置 Git Bash 来实现敲打 Linux 命令。 打开默认的 settings.json 文件，在 profiles -&amp;gt; list 节点下添加以下信息 , { &amp;quot;guid&amp;quot;: &amp;quot;{b453ae62-4e3d-5e58-b989-0a998ec441b7}&amp;quot;, &amp;quot;hidden&amp;quot;: false, &amp;quot;name&amp;quot;: &amp;quot;Git Bash&amp;quot;, &amp;quot;commandline&amp;quot; : &amp;quot;D:\\Program Files\\Git\\bin\\bash.exe</description></item><item><title>蒸蛋</title><link>https://sanoon.me/whisper/%E8%92%B8%E8%9B%8B/</link><pubDate>Tue, 15 Sep 2020 00:41:49 +0800</pubDate><guid>https://sanoon.me/whisper/%E8%92%B8%E8%9B%8B/</guid><description>终于能做出完美的水蒸蛋啦，入口即化哈哈哈。 材料准备 50g 鸡蛋两个 30 - 40 摄氏度温水 280g 葱花 海鲜酱油 食盐 滤网 蒸蛋步骤 小碗一只，打入两个鸡蛋，加入一点点食盐，边加入温水边打散 使用细密度的滤网过滤三遍，剩下的丢弃掉</description></item><item><title>凉拌菜调汁</title><link>https://sanoon.me/whisper/%E5%87%89%E6%8B%8C%E8%8F%9C%E8%B0%83%E6%B1%81/</link><pubDate>Tue, 15 Sep 2020 00:26:33 +0800</pubDate><guid>https://sanoon.me/whisper/%E5%87%89%E6%8B%8C%E8%8F%9C%E8%B0%83%E6%B1%81/</guid><description>周末偶尔做做饭，调调凉拌菜什么的，记录一下调汁儿的方子。 准备材料 蚝油 味极鲜生抽 花椒麻油 芝麻香油 陈醋 油泼辣子红油 食盐 蒜末 姜丝 小葱 香菜 调汁儿步骤 小碗备料，放入蒜末、姜丝 一勺蚝油 两勺生抽 一勺花椒油 一勺芝麻香</description></item><item><title>Vue初体验</title><link>https://sanoon.me/posts/vue%E5%88%9D%E4%BD%93%E9%AA%8C/</link><pubDate>Wed, 09 Sep 2020 00:16:42 +0800</pubDate><guid>https://sanoon.me/posts/vue%E5%88%9D%E4%BD%93%E9%AA%8C/</guid><description>Vue 是什么 Vue 是一套用于构建用户界面的渐进式框架。 Vue 安装方式 CDN 直接引入 &amp;lt;!-- 开发环境版本 --&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- 生产环境版本 --&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 下载引入 &amp;lt;!-- 开发环境版本 --&amp;gt; https://vuejs.org/js/vue.js &amp;lt;!-- 生产环境版本 --&amp;gt; https://vuejs.org/js/vue.min.js NPM安装 # 最新稳定版 $ npm install vue 我们先学习 Vue 语法，建</description></item><item><title>Redis 介绍</title><link>https://sanoon.me/posts/redis%E4%BB%8B%E7%BB%8D/</link><pubDate>Fri, 28 Aug 2020 00:22:22 +0800</pubDate><guid>https://sanoon.me/posts/redis%E4%BB%8B%E7%BB%8D/</guid><description>Redis 是一款流行的 NoSQL 数据库，使用 C 语言编写，包含多种数据结构，是一款支持内存、持久化以及网络传输的对键值对数据库，并提供多种语言的 API。 Redis 特点 数据类型多样 高并发读写 可持久化 支持事务 应用场景 缓存系统 消息系</description></item><item><title>MacOS 系统 Go 的安装与配置</title><link>https://sanoon.me/posts/macos%E7%B3%BB%E7%BB%9Fgo%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 21 Aug 2020 00:32:01 +0800</pubDate><guid>https://sanoon.me/posts/macos%E7%B3%BB%E7%BB%9Fgo%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>本文主要学习在 MacOS 系统中，如何安装与配置 Go 语言的开发环境。 安装 Go 首先我们先下载 Go 安装包，MacOS 请选择 pkg，双击安装即可。安装完成后，我们来使用 go version 测试一下，可以看到我们安装的 Go 是 1.15 的版本。 ➜ ~ go version</description></item><item><title>Go 语言介绍</title><link>https://sanoon.me/posts/go%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/</link><pubDate>Thu, 20 Aug 2020 00:28:05 +0800</pubDate><guid>https://sanoon.me/posts/go%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/</guid><description>Go 语言是由 Google 公司研发的一门编译型语言，兼具 Python 的语法和 C 语言的高性能，天生具备并发能力，Go 语言已成为云计算、云存储时代重要的基础的编程语言，号称是 21 世界的 C 语言。 Go 语言的特点 语法简洁 开发效率高 性能好 Go</description></item><item><title>串行、并发与并行的区别</title><link>https://sanoon.me/posts/%E4%B8%B2%E8%A1%8C%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C/</link><pubDate>Wed, 19 Aug 2020 00:16:59 +0800</pubDate><guid>https://sanoon.me/posts/%E4%B8%B2%E8%A1%8C%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C/</guid><description>本文主要解释串行（Serial）、并发（Concurrent）与并行（Parallel）这三个概念。 举个栗子 现实生活中我们经常会遇到排队的情况，比如超市购物结账时 串行（Serail）: 1 个结算出口，购</description></item><item><title>提升开发效率的开源工具</title><link>https://sanoon.me/posts/%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/</link><pubDate>Wed, 12 Aug 2020 21:34:47 +0800</pubDate><guid>https://sanoon.me/posts/%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/</guid><description>本文记录一些开发过程中常用的开源工具，持续更新中。 Arthas Arthas 是 Alibaba 开源的 Java 诊断工具。支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题</description></item><item><title>Linux 查询日志技巧</title><link>https://sanoon.me/posts/linux-%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E6%8A%80%E5%B7%A7/</link><pubDate>Fri, 24 Jul 2020 19:34:47 +0800</pubDate><guid>https://sanoon.me/posts/linux-%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E6%8A%80%E5%B7%A7/</guid><description>我们在定位问题的时候，经常需要查询日志，本文介绍一些 Linux 查询日志的小技巧。 tail 命令 实时滚动日志输出 tail -f log.log 输出倒数 N 行 tail -n log.log head 命令 查询前面 N 行 head -n log.log grep 命令 过滤某个关键字 key grep key log.log 过滤某个关键字 key 前后 N 行 grep -C N</description></item><item><title>Git 自动化更新本地代码脚本</title><link>https://sanoon.me/posts/git-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E8%84%9A%E6%9C%AC/</link><pubDate>Tue, 21 Jul 2020 21:38:27 +0800</pubDate><guid>https://sanoon.me/posts/git-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E8%84%9A%E6%9C%AC/</guid><description>在本地开发的过程中，每天需要更新多个项目且大量的 MR 到本地代码库，使用该脚本自动化更新。 #!/bin/bash echo &amp;quot;---------------------------------------update code start---------------------------------------&amp;quot; echo &amp;quot;Your code root dir is $1.&amp;quot; # shellcheck disable=SC2006 filelist=`ls $1` for file in $filelist do if [ -d &amp;quot;$1/$file&amp;quot; ]; then echo &amp;quot;update $1/$file start..............................................................&amp;quot; # shellcheck disable=SC2164 cd &amp;quot;$1/$file&amp;quot; echo &amp;quot;reset to HEAD..........................&amp;quot; git reset --hard HEAD echo &amp;quot;fetch all..............................&amp;quot; git fetch --all echo &amp;quot;pull all...............................&amp;quot; git pull --all</description></item><item><title>免费 Https 证书的申请与配置</title><link>https://sanoon.me/posts/%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 18 Jun 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>HTTPS 即 HTTP over SSL，是确保 HTTP 连接建立在 SSL 之上，保证浏览器发送到服务器的数据的安全。 下载 certbot 客户端 wget https://dl.eff.org/certbot-auto chmod a+x ./certbot-auto 申请免费证书 ./certbot-auto certonly --standalone -d www.sanoon.me -d sanoon.me Nginx 证书配置，80 端口强制跳转到 https server { listen 80; listen [::]:80; server_name sanoon.me www.sanoon.me; rewrite ^(.*) https://www.sanoon.me$1 permanent; } server { listen 443 ssl; server_name sanoon.me</description></item><item><title>Hexo 搭建博客</title><link>https://sanoon.me/posts/hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link><pubDate>Tue, 16 Jun 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid><description>Hexo 简介 快速、简洁且高效的博客框架，Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo 安装 前提是安装 Node &amp;amp;&amp;amp; Git 安装 hexo-cli 客户端命令 npm install -g hexo-cli 创建项目 创建工程 hexo init blog</description></item><item><title>Fork 库同步远程新增分支</title><link>https://sanoon.me/posts/fork%E5%BA%93%E5%90%8C%E6%AD%A5%E8%BF%9C%E7%A8%8B%E6%96%B0%E5%A2%9E%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Fri, 29 May 2020 04:08:59 +0800</pubDate><guid>https://sanoon.me/posts/fork%E5%BA%93%E5%90%8C%E6%AD%A5%E8%BF%9C%E7%A8%8B%E6%96%B0%E5%A2%9E%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>在开发过程中，经常会遇到自己的 Fork 库需要同步远程仓库新增的分支的情况，下面我们就来介绍下，如何进行同步。 获取远程新增分支信息 git fetch remote remote_new_branch_name:remote_new_branch_name 注: 请注意将 remote 和 remote_new_branch_name 替换称自己的远程仓库及分支名称 切换本地分支为远程新增</description></item><item><title>Mac 处理图片翻转,裁剪,修改格式</title><link>https://sanoon.me/posts/sips/</link><pubDate>Wed, 20 May 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/sips/</guid><description>Sips 简介 sips命令是 Mac 自带的一款图片处理的命令行工具，可以根据需要对图片进行裁剪，修改尺寸，翻转以及查看 Meta 信息等 按长宽比例缩小 sips -z length width *.jpg 翻转（默认顺时针） sips -r 90 *.jpg 修改后缀格式 sips -s format png xxx.jpg --out xxx.png 查看元数据 sips</description></item><item><title>Spring-boot 集成 Kafka</title><link>https://sanoon.me/posts/spring-boot-%E9%9B%86%E6%88%90-kafka/</link><pubDate>Sat, 16 May 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/spring-boot-%E9%9B%86%E6%88%90-kafka/</guid><description>POM 引入 Spring-boot-kafka &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.kafka&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-kafka&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 创建启动类 @SpringBootApplication public class KafkaApplication { public static void main(String[] args) { SpringApplication.run(KafkaApplication.class, args); } } 创建生产者配置类 @Configuration public class ProducerConfiguration { public ProducerConfiguration() { } @Bean public Map&amp;lt;String, Object&amp;gt; producerConfigs() { HashMap&amp;lt;String, Object&amp;gt; props = new HashMap&amp;lt;&amp;gt;(); props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, &amp;quot;localhost:9092&amp;quot;); props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class); props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class); props.put(ProducerConfig.MAX_BLOCK_MS_CONFIG, 5000); return props; } @Bean public ProducerFactory&amp;lt;String, String&amp;gt; producerFactory() { return new DefaultKafkaProducerFactory&amp;lt;&amp;gt;(producerConfigs()); } @Bean public KafkaTemplate&amp;lt;String, String&amp;gt; kafkaTemplate() { return new KafkaTemplate&amp;lt;&amp;gt;(producerFactory()); } @Bean public Producer sender() { return new Producer(); } } 创</description></item><item><title>Kafka 安装笔记</title><link>https://sanoon.me/posts/kafka-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 15 May 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/kafka-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</guid><description>安装 wget http://mirror.bit.edu.cn/apache/kafka/0.11.0.2/kafka_2.11-0.11.0.2.tgz tar -zxvf kafka_2.11-0.11.0.2.tgz mv kafka_2.11-1.0.0 kafka cd kafka 配置 查看默认配置，cat config/server.properties broker.id=0 num.network.threads=3 num.io.threads=8 socket.send.buffer.bytes=102400 socket.receive.buffer.bytes=102400 socket.request.max.bytes=104857600 log.dirs=/tmp/kafka-logs num.partitions=1 num.recovery.threads.per.data.dir=1 offsets.topic.replication.factor=1 transaction.state.log.replication.factor=1 transaction.state.log.min.isr=1 log.retention.hours=168 log.segment.bytes=1073741824 log.retention.check.interval.ms=300000 zookeeper.connect=localhost:2181 zookeeper.connection.timeout.ms=6000 group.initial.rebalance.delay.ms=0 部署 启动 KafKa 之前，需要先启动 Zookeeper，参见 Zookeeper 安装笔记 后台启动 ./bin/kafka-server-start.sh --deamon config/server.properties 创建 Topic ./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test 查看 Topic ./bin/kafka-topics.sh --list --zookeeper localhost:2181</description></item><item><title>从零开始搭建 zookeeper 和 Kafka 集群</title><link>https://sanoon.me/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-kafka-%E9%9B%86%E7%BE%A4/</link><pubDate>Fri, 15 May 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-kafka-%E9%9B%86%E7%BE%A4/</guid><description>安装 jdk 下载安装 jdk cd /data wget --no-cookies --no-check-certificate --header &amp;quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&amp;quot; &amp;quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&amp;quot; tar -zxvf jdk-8u141-linux-x64.tar.gz mv jdk1.8.0_141/ jdk 设置环境变量 vi 编辑 /etc/profile，写入以下信息并 :wq! 保存，执行 source /etc/profile 命令，使其生效，执行 java -version 查看是否配置成功 JAVA_HOME=/data/jdk JRE_HOME=/data/jdk/jre CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export JAVA_HOME JRE_HOME CLASS_PATH PATH 搭建 zookeeper 集群 下载安装 zookeeper</description></item><item><title>Zookeeper 安装笔记</title><link>https://sanoon.me/posts/zookeeper-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 14 May 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/zookeeper-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</guid><description>安装 wget http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.11/zookeeper-3.4.11.tar.gz tar -zxvf zookeeper-3.4.11.tar.gz mv zookeeper-3.4.11 zookeeper mkdir /tmp/zookeeper mkdir /tmp/zookeeper/data mkdir /tmp/zookeeper/log 配置 cd zookeeper/conf/ vi zoo.cfg #写入以下信息 tickTime=2000 initLimit=10 syncLimit=5 clientPort=2181 dataDir=/tmp/zookeeper/data dataLogDir=/tmp/zookeeper/log 启动 cd zookeeper/bin ./zkServer.sh start 查看状态 ./zkServer.sh status 停止 ./zkServer.sh stop</description></item><item><title>Kafka 入门</title><link>https://sanoon.me/posts/kafka-%E5%85%A5%E9%97%A8/</link><pubDate>Thu, 14 May 2020 21:34:47 +0800</pubDate><guid>https://sanoon.me/posts/kafka-%E5%85%A5%E9%97%A8/</guid><description>概述 定义 Kafka 是一个分布式流处理框架。 特性 实现消息的发布/订阅 存储流消息 实时流处理 核心 API The Producer API：允许生产者发布消息到一个或者多个 TOPIC The Consumer API：允许消费者消费一个或者多个 TOPIC，并对接收到的消息进行</description></item><item><title>Git 全局配置</title><link>https://sanoon.me/posts/git%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 07 May 2020 15:06:41 +0800</pubDate><guid>https://sanoon.me/posts/git%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/</guid><description>日常使用 Git 进行代码的版本管理，需要配置一些全局参数，诸如代理、换行符、关闭 SSL 校验等，本文主要记录下个人常用的 Git 全局配置信息。 配置用户名和邮箱信息 git config --global user.name xxx git config --global user.email xxx@xxx.com 配置 Linux 和 Windows 自动换行符 git config --global core.autocrlf true 备注`</description></item><item><title>SOLID 原则</title><link>https://sanoon.me/posts/solid%E5%8E%9F%E5%88%99/</link><pubDate>Mon, 27 Apr 2020 23:29:12 +0800</pubDate><guid>https://sanoon.me/posts/solid%E5%8E%9F%E5%88%99/</guid><description>六大原则 设计模式有六大原则，分别是： 单一职责：Single Responsibility Principle 开闭原则：Open Closed Principle 里氏替换：Liskov Substitution Principle 迪米特法则：Law of Demeter 接口隔离：Interface Segregation Principle 依赖倒置：Dependence Inversion Principle 它</description></item><item><title>Mac Pipenv 的安装</title><link>https://sanoon.me/posts/mac%E4%B8%8Apipenv%E7%9A%84%E5%AE%89%E8%A3%85/</link><pubDate>Sat, 18 Apr 2020 23:32:34 +0800</pubDate><guid>https://sanoon.me/posts/mac%E4%B8%8Apipenv%E7%9A%84%E5%AE%89%E8%A3%85/</guid><description>Mac 默认 Python 版本为 2.7，该版本在不久的未来将停止维护，鉴于此安装了 Python 3.6，并安装包依赖管理工具 Pipenv 安装python3 和 pip3 通过 brew 安装 brew install python3 查看 python 版本 python3 -V 查看 pip 版本,通过 brew 安装 python3 时，会自动安装 pip3 pip3 -V 安装 Pipenv 安</description></item><item><title>详解单例模式</title><link>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 15 Apr 2020 10:08:59 +0800</pubDate><guid>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>单例模式 什么是单例，顾名思义，只允许有一个实例。使用场景常见的有数据库连接池、多线程的线程池等。总之 JVM 中只允许存在一个对象实例的都可以选择单例模式。那单例模式的实现方式都有哪些呢？请看详解。 饿汉式 饿汉</description></item><item><title>Git 删除已经 push 的记录</title><link>https://sanoon.me/posts/git%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8Fpush%E7%9A%84%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 13 Apr 2020 23:51:33 +0800</pubDate><guid>https://sanoon.me/posts/git%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8Fpush%E7%9A%84%E8%AE%B0%E5%BD%95/</guid><description>在日常开发中，会遇到想删除已经 push 到 git 服务器的记录，这时候该怎么办呢？ 我们可以使用以下几个命令来处理。 查看代码提交日志 git log commit 7c40f734ceaf81d2595a7f6ad8bc3710db5c7ed2 (HEAD -&amp;gt; master, origin/master) Author: scopor &amp;lt;scopor@163.com&amp;gt; Date: Mon Apr 13 23:43:09 2020 +0800 modify ci.yml commit def72b2599cac1dcdf67947b3f887574d12dc6cc Author: scopor &amp;lt;scopor@163.com&amp;gt; Date: Mon Apr 13 23:33:46 2020 +0800 add Github Actions 回退至上一次的</description></item><item><title>利用 Github Actions 自动化部署 Github Pages</title><link>https://sanoon.me/posts/%E5%88%A9%E7%94%A8githubactions%E9%83%A8%E7%BD%B2githubpages/</link><pubDate>Mon, 13 Apr 2020 11:08:59 +0800</pubDate><guid>https://sanoon.me/posts/%E5%88%A9%E7%94%A8githubactions%E9%83%A8%E7%BD%B2githubpages/</guid><description>Github Actions Github Actions 是 Github 推出的一项持续自动化部署 repository 的效率工具，根据个人或者组织设定的脚本来完成对工程的自动化部署，使得代码审查、分支以及 issue 的管理按照你设定的方式进行工作。 下面我们来操作下 Github Action 的自动化配置过程。 环境</description></item><item><title>Cloudflare 反向代理 Google</title><link>https://sanoon.me/posts/cloudflare%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86google/</link><pubDate>Fri, 10 Apr 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/cloudflare%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86google/</guid><description>前阵子梯子服务器到期了，临时想访问下 Google 略显的困难，找了个镜像临时凑活了下，进而好奇这种镜像整个 Google 是怎么做的。一顿操作猛如虎，发现大家都是使用反向代理实现的镜像，索性也实践了一把，以下是详细过程。 注册 Cloudflare</description></item><item><title>替换 Jar 中的 class</title><link>https://sanoon.me/posts/jar%E4%BF%AE%E6%94%B9/</link><pubDate>Fri, 10 Apr 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/jar%E4%BF%AE%E6%94%B9/</guid><description>重新打包可运行的 Jar 包 创建临时路径，复制需要修改的 Jar 到该目录 解压该 jar 文件，unzip xxx.jar 替换相关的 class文件 重新打包，jar -cvfM xxx.jar com *.class META-INF（或 jar -cvfM xxx.jar *） 备注：META-INF 文件包含引用的其</description></item><item><title>Log4j 日志脱敏</title><link>https://sanoon.me/posts/log4j%E6%97%A5%E5%BF%97%E8%84%B1%E6%95%8F/</link><pubDate>Wed, 08 Apr 2020 23:36:09 +0800</pubDate><guid>https://sanoon.me/posts/log4j%E6%97%A5%E5%BF%97%E8%84%B1%E6%95%8F/</guid><description>日常开发中，经常性的会遇到安全性问题，其中日志脱敏就是其中一种。下面我们就来看看如何对 Log4j 日志信息实现脱敏。 通常大家都会在 log4j.properties 中定义各种 appender，其中有一项配置信息是输出的格式化信息使用的 Layout 定义。</description></item><item><title>Maven Scope 详解</title><link>https://sanoon.me/posts/mavenscope%E8%AF%A6%E8%A7%A3/</link><pubDate>Wed, 08 Apr 2020 22:27:56 +0800</pubDate><guid>https://sanoon.me/posts/mavenscope%E8%AF%A6%E8%A7%A3/</guid><description>Maven Scope 包含 compile、test、runtime、provided、system、import。其中默认依赖配置项是 compile。那么这几个配置有什么区别，我们来详解一下。 compile 不显示指定 Scope 时，作为默认</description></item><item><title>Spring Cloud Eureka 注册中心</title><link>https://sanoon.me/posts/springcloud%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83eureka/</link><pubDate>Sat, 21 Mar 2020 00:05:42 +0800</pubDate><guid>https://sanoon.me/posts/springcloud%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83eureka/</guid><description>Eureka 是 Netflix 开源的服务注册中心，是Spring Cloud 的重要组成部分，完整的实现了服务注册和服务发现。 Eureka 将数据完全存储于内存中，对于注册的服务本身，需要维持心跳。 下面我们将基于 Spring Cloud ：Hoxton.SR3；Spri</description></item><item><title>Chrome 非安全端口</title><link>https://sanoon.me/posts/chrome%E9%9D%9E%E5%AE%89%E5%85%A8%E7%AB%AF%E5%8F%A3/</link><pubDate>Fri, 20 Mar 2020 19:34:47 +0800</pubDate><guid>https://sanoon.me/posts/chrome%E9%9D%9E%E5%AE%89%E5%85%A8%E7%AB%AF%E5%8F%A3/</guid><description>今天给一个 Web 服务配置了 6000 端口，使用 chrome 访问不了，换了 IE 浏览器正常，深究之后得知，chrome 浏览器会将一些协议的端口视为非安全端口。 错误信息 ERR_UNSAFE_PORT 解决方案 更换端口 右键单击Chrome快捷方式 ➡ 目标 ➡ 在后面添</description></item><item><title>Spring Cloud 介绍</title><link>https://sanoon.me/posts/springcloud%E4%BB%8B%E7%BB%8D/</link><pubDate>Fri, 20 Mar 2020 00:00:12 +0800</pubDate><guid>https://sanoon.me/posts/springcloud%E4%BB%8B%E7%BB%8D/</guid><description>最近使用 SpringBoot 快速落地了一个样机的 demo，一旦某个服务挂掉之后，整个服务将不可用，思考之余，决定学习下现下流行的微服务框架 Spring Cloud。 什么是微服务 微服务是和以前的单体服务相对立，单体服务即将所有的功能</description></item><item><title>Yarn 配置</title><link>https://sanoon.me/posts/yarn%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 19 Mar 2020 22:33:04 +0800</pubDate><guid>https://sanoon.me/posts/yarn%E9%85%8D%E7%BD%AE/</guid><description>今天在使用 Yarn 命令 install 的时候，一直下载不下来，因为公司网络环境复杂，必须通过代理才能访问，尝试设置了代理之后，错误依旧。在大量搜索之后发现缺少一个关键性配置信息，记录在此。 错误信息 There appears to be trouble with your network connection. Retrying... 设置</description></item><item><title>JVM 指令与工具</title><link>https://sanoon.me/posts/jvm%E6%8C%87%E4%BB%A4%E4%B8%8E%E5%B7%A5%E5%85%B7/</link><pubDate>Wed, 18 Mar 2020 23:32:34 +0800</pubDate><guid>https://sanoon.me/posts/jvm%E6%8C%87%E4%BB%A4%E4%B8%8E%E5%B7%A5%E5%85%B7/</guid><description>查看 Java 进程列表: jps jps 查看 gc 信息: jstat jstat -gcutil PID 毫秒数 jstat -gc PID 毫秒数 jstat -gcnew PID jstat -gcold PID 查看线程信息: jstack jstack PID 查看内存状态: jmap # 导出到文件中，需要使用其它工具打开 jmap -dump:file=file PID # 直接在控制台查看 jmap -heap PID 查看进程扩展参数信息：jin</description></item><item><title>Maven 跳过某个子 Module 的构建</title><link>https://sanoon.me/posts/maven%E8%B7%B3%E8%BF%87%E6%9F%90%E4%B8%AA%E5%AD%90module%E7%9A%84%E6%9E%84%E5%BB%BA/</link><pubDate>Wed, 18 Mar 2020 21:58:33 +0800</pubDate><guid>https://sanoon.me/posts/maven%E8%B7%B3%E8%BF%87%E6%9F%90%E4%B8%AA%E5%AD%90module%E7%9A%84%E6%9E%84%E5%BB%BA/</guid><description>当项目中出现某个稳定的模块，不需要每次编译的时候重复去构建它，我们可以使用如下的命令去跳过它 mvn -pl '!父Module/子Module' clean install 假如你使用的是 IDEA 插件 Maven Helper，那需要去掉引号 mvn -pl !父Mod</description></item><item><title>Docker 使用指南</title><link>https://sanoon.me/posts/docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 06 Mar 2020 20:27:56 +0800</pubDate><guid>https://sanoon.me/posts/docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid><description>查看镜像列表 docker images docker images -a 搜索镜像 docker search java 下载镜像 docker pull java 运行容器 docker run 镜像ID 停止容器 docker stop 容器ID # 批量停止容器 docker stop `docker ps -a -q` 重启容器 docker restart 容器ID 启动容器 docker start 容器ID 删除容器 docker rm -f 容器ID # 批量删除容器 docker rm `docker ps</description></item><item><title>PicGo 配置 Github 图床</title><link>https://sanoon.me/posts/picgo%E9%85%8D%E7%BD%AEgithub/</link><pubDate>Tue, 03 Mar 2020 23:57:49 +0800</pubDate><guid>https://sanoon.me/posts/picgo%E9%85%8D%E7%BD%AEgithub/</guid><description>在写博客的过程中，大家避免不了要使用截图。在 Markdown 中使用该图片，必须要有链接地址。 保存截图的过程比较麻烦，想起之前看过 Mac 上有款名为 PicGo 的软件可以解决这个问题。 Mac 安装 PicGo 执行以下命令 brew cask install picgo 创建 Github 图片库 参见 生成</description></item><item><title>博客图床</title><link>https://sanoon.me/posts/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</link><pubDate>Fri, 28 Feb 2020 23:13:02 +0800</pubDate><guid>https://sanoon.me/posts/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</guid><description>博客图片一直存储在 Github 上，国内访问一直很慢，因此需要寻找合适的图床。在看了国内七牛、又拍云、贴图库等存储库之后，终因为备案、限量等各种原因，在快要放弃的时候发现了 jsDelivr 这个项目。 该项目旨在帮助大家使用 Github 作为</description></item><item><title>IDEA 加载大文件</title><link>https://sanoon.me/posts/idea%E5%8A%A0%E8%BD%BD%E5%A4%A7%E6%96%87%E4%BB%B6/</link><pubDate>Fri, 28 Feb 2020 21:38:27 +0800</pubDate><guid>https://sanoon.me/posts/idea%E5%8A%A0%E8%BD%BD%E5%A4%A7%E6%96%87%E4%BB%B6/</guid><description>最近在项目开发过程中，遇到 gRPC 生成的大文件，无法加载。解决方案如下： 打开此文件 Help –&amp;gt; Edit Custom Properties 修改配置大小为 10 M： idea.max.intellisense.filesize=10240</description></item><item><title>Maven 多线程编译</title><link>https://sanoon.me/posts/maven%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E8%AF%91/</link><pubDate>Thu, 27 Feb 2020 21:29:32 +0800</pubDate><guid>https://sanoon.me/posts/maven%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E8%AF%91/</guid><description>公司的项目比较大，编译缓慢，耗时 2 个多小时。除了配置各种编译跳过选项后，也需要 1 个小时左右的时间。 maven clean install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Dfindbugs.skip=true 在翻阅 Maven 命令时，发现 Maven 3.0 以上的版本是支持多线程编译的，使用 -T 的命令可以指定多线程的数量。</description></item><item><title>酸汤面</title><link>https://sanoon.me/whisper/%E9%85%B8%E6%B1%A4%E9%9D%A2/</link><pubDate>Sat, 22 Feb 2020 10:54:39 +0800</pubDate><guid>https://sanoon.me/whisper/%E9%85%B8%E6%B1%A4%E9%9D%A2/</guid><description>分享下做酸汤面片的步骤 韭菜切碎，西红柿切块，老豆腐切丁，鸡蛋打碎，木耳和黄花热水泡开 热锅冷油，稍微冒烟，下豆腐，小火慢炒，半熟时加盐和十三香，大火翻炒，洗锅备用 热锅冷油，稍微冒烟，下西红柿，翻炒出汁，</description></item><item><title>半日闲</title><link>https://sanoon.me/whisper/%E5%8D%8A%E6%97%A5%E9%97%B2/</link><pubDate>Sat, 15 Feb 2020 23:55:21 +0800</pubDate><guid>https://sanoon.me/whisper/%E5%8D%8A%E6%97%A5%E9%97%B2/</guid><description>由于众所周知的原因，在家快憋疯的贾老师和我趁着周末 全副武装 的驱车到县郊外散心，偶然摄得此景。 天气也是给力的紧，烦闷的情绪也就去了大半，贾老师也不时的笑笑。 想来此时能看到这悠悠蓝天，也是一种奢侈。 题鹤林</description></item><item><title>About</title><link>https://sanoon.me/about/</link><pubDate>Wed, 12 Feb 2020 23:24:31 +0800</pubDate><guid>https://sanoon.me/about/</guid><description>About me 生于长安 学于彭城 辗转于花城、夜郎、临安，止于长安 About site 庚子年初，疫情肆虐，闲来无事，遂作此站</description></item><item><title>爱 - 摄于南山</title><link>https://sanoon.me/photo/%E7%88%B1/</link><pubDate>Tue, 28 Jan 2020 17:34:47 +0800</pubDate><guid>https://sanoon.me/photo/%E7%88%B1/</guid><description/></item><item><title>湖 - 摄于美陂</title><link>https://sanoon.me/photo/%E6%B9%96/</link><pubDate>Tue, 08 Oct 2019 17:34:47 +0800</pubDate><guid>https://sanoon.me/photo/%E6%B9%96/</guid><description/></item><item><title>山 - 摄于朱雀</title><link>https://sanoon.me/photo/%E5%B1%B1/</link><pubDate>Thu, 22 Aug 2019 17:34:47 +0800</pubDate><guid>https://sanoon.me/photo/%E5%B1%B1/</guid><description/></item><item><title>竹 - 摄于水街</title><link>https://sanoon.me/photo/%E7%AB%B9/</link><pubDate>Sun, 28 Jul 2019 17:34:47 +0800</pubDate><guid>https://sanoon.me/photo/%E7%AB%B9/</guid><description/></item></channel></rss>