<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Sanoon with Lemon</title><link>https://sanoon.me/posts/</link><description>Recent content in Posts on Sanoon with Lemon</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 13 Aug 2020 21:34:47 +0800</lastBuildDate><atom:link href="https://sanoon.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Kafka 入门</title><link>https://sanoon.me/posts/kafka-%E5%85%A5%E9%97%A8/</link><pubDate>Thu, 13 Aug 2020 21:34:47 +0800</pubDate><guid>https://sanoon.me/posts/kafka-%E5%85%A5%E9%97%A8/</guid><description>概述 定义 Kafka 是一个分布式流处理框架。 特性 实现消息的发布/订阅 存储流消息 实时流处理 核心 API The Producer API：允许生产者发布消息到一个或者多个 TOPIC The Consumer API：允许消费者消费一个或者多个 TOPIC，并对接收到的消息进行</description></item><item><title>提升开发效率的开源工具</title><link>https://sanoon.me/posts/%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/</link><pubDate>Wed, 12 Aug 2020 21:34:47 +0800</pubDate><guid>https://sanoon.me/posts/%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/</guid><description>本文记录一些开发过程中常用的开源工具，持续更新中。 Arthas Arthas 是 Alibaba 开源的 Java 诊断工具。支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题</description></item><item><title>Linux 查询日志技巧</title><link>https://sanoon.me/posts/linux-%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E6%8A%80%E5%B7%A7/</link><pubDate>Fri, 24 Jul 2020 19:34:47 +0800</pubDate><guid>https://sanoon.me/posts/linux-%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E6%8A%80%E5%B7%A7/</guid><description>我们在定位问题的时候，经常需要查询日志，本文介绍一些 Linux 查询日志的小技巧。 tail 命令 实时滚动日志输出 tail -f log.log 输出倒数 N 行 tail -n log.log head 命令 查询前面 N 行 head -n log.log grep 命令 过滤某个关键字 key grep key log.log 过滤某个关键字 key 前后 N 行 grep -C N</description></item><item><title>Git 自动化更新本地代码脚本</title><link>https://sanoon.me/posts/git-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E8%84%9A%E6%9C%AC/</link><pubDate>Tue, 21 Jul 2020 21:38:27 +0800</pubDate><guid>https://sanoon.me/posts/git-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E8%84%9A%E6%9C%AC/</guid><description>在本地开发的过程中，每天需要更新多个项目且大量的 MR 到本地代码库，使用该脚本自动化更新。 #!/bin/bash echo &amp;quot;---------------------------------------update code start---------------------------------------&amp;quot; echo &amp;quot;Your code root dir is $1.&amp;quot; # shellcheck disable=SC2006 filelist=`ls $1` for file in $filelist do if [ -d &amp;quot;$1/$file&amp;quot; ]; then echo &amp;quot;update $1/$file start..............................................................&amp;quot; # shellcheck disable=SC2164 cd &amp;quot;$1/$file&amp;quot; echo &amp;quot;reset to HEAD..........................&amp;quot; git reset --hard HEAD echo &amp;quot;fetch all..............................&amp;quot; git fetch --all echo &amp;quot;pull all...............................&amp;quot; git pull --all</description></item><item><title>Fork 库同步远程新增分支</title><link>https://sanoon.me/posts/fork%E5%BA%93%E5%90%8C%E6%AD%A5%E8%BF%9C%E7%A8%8B%E6%96%B0%E5%A2%9E%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Fri, 29 May 2020 04:08:59 +0800</pubDate><guid>https://sanoon.me/posts/fork%E5%BA%93%E5%90%8C%E6%AD%A5%E8%BF%9C%E7%A8%8B%E6%96%B0%E5%A2%9E%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>在开发过程中，经常会遇到自己的 Fork 库需要同步远程仓库新增的分支的情况，下面我们就来介绍下，如何进行同步。 获取远程新增分支信息 git fetch remote remote_new_branch_name:remote_new_branch_name 注: 请注意将 remote 和 remote_new_branch_name 替换称自己的远程仓库及分支名称 切换本地分支为远程新增</description></item><item><title>Git 全局配置</title><link>https://sanoon.me/posts/git%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 07 May 2020 15:06:41 +0800</pubDate><guid>https://sanoon.me/posts/git%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/</guid><description>日常使用 Git 进行代码的版本管理，需要配置一些全局参数，诸如代理、换行符、关闭 SSL 校验等，本文主要记录下个人常用的 Git 全局配置信息。 配置用户名和邮箱信息 git config --global user.name xxx git config --global user.email xxx@xxx.com 配置 Linux 和 Windows 自动换行符 git config --global core.autocrlf true 备注`</description></item><item><title>SOLID 原则</title><link>https://sanoon.me/posts/solid%E5%8E%9F%E5%88%99/</link><pubDate>Mon, 27 Apr 2020 23:29:12 +0800</pubDate><guid>https://sanoon.me/posts/solid%E5%8E%9F%E5%88%99/</guid><description>六大原则 设计模式有六大原则，分别是： 单一职责：Single Responsibility Principle 开闭原则：Open Closed Principle 里氏替换：Liskov Substitution Principle 迪米特法则：Law of Demeter 接口隔离：Interface Segregation Principle 依赖倒置：Dependence Inversion Principle 它</description></item><item><title>详解单例模式</title><link>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 15 Apr 2020 10:08:59 +0800</pubDate><guid>https://sanoon.me/posts/%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>单例模式 什么是单例，顾名思义，只允许有一个实例。使用场景常见的有数据库连接池、多线程的线程池等。总之 JVM 中只允许存在一个对象实例的都可以选择单例模式。那单例模式的实现方式都有哪些呢？请看详解。 饿汉式 饿汉</description></item><item><title>Git 删除已经 push 的记录</title><link>https://sanoon.me/posts/git%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8Fpush%E7%9A%84%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 13 Apr 2020 23:51:33 +0800</pubDate><guid>https://sanoon.me/posts/git%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8Fpush%E7%9A%84%E8%AE%B0%E5%BD%95/</guid><description>在日常开发中，会遇到想删除已经 push 到 git 服务器的记录，这时候该怎么办呢？ 我们可以使用以下几个命令来处理。 查看代码提交日志 git log commit 7c40f734ceaf81d2595a7f6ad8bc3710db5c7ed2 (HEAD -&amp;gt; master, origin/master) Author: scopor &amp;lt;scopor@163.com&amp;gt; Date: Mon Apr 13 23:43:09 2020 +0800 modify ci.yml commit def72b2599cac1dcdf67947b3f887574d12dc6cc Author: scopor &amp;lt;scopor@163.com&amp;gt; Date: Mon Apr 13 23:33:46 2020 +0800 add Github Actions 回退至上一次的</description></item><item><title>利用 Github Actions 自动化部署 Github Pages</title><link>https://sanoon.me/posts/%E5%88%A9%E7%94%A8githubactions%E9%83%A8%E7%BD%B2githubpages/</link><pubDate>Mon, 13 Apr 2020 11:08:59 +0800</pubDate><guid>https://sanoon.me/posts/%E5%88%A9%E7%94%A8githubactions%E9%83%A8%E7%BD%B2githubpages/</guid><description>Github Actions Github Actions 是 Github 推出的一项持续自动化部署 repository 的效率工具，根据个人或者组织设定的脚本来完成对工程的自动化部署，使得代码审查、分支以及 issue 的管理按照你设定的方式进行工作。 下面我们来操作下 Github Action 的自动化配置过程。 环境</description></item><item><title>Cloudflare 反向代理 Google</title><link>https://sanoon.me/posts/cloudflare%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86google/</link><pubDate>Fri, 10 Apr 2020 23:24:13 +0800</pubDate><guid>https://sanoon.me/posts/cloudflare%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86google/</guid><description>前阵子梯子服务器到期了，临时想访问下 Google 略显的困难，找了个镜像临时凑活了下，进而好奇这种镜像整个 Google 是怎么做的。一顿操作猛如虎，发现大家都是使用反向代理实现的镜像，索性也实践了一把，以下是详细过程。 注册 Cloudflare</description></item><item><title>Log4j 日志脱敏</title><link>https://sanoon.me/posts/log4j%E6%97%A5%E5%BF%97%E8%84%B1%E6%95%8F/</link><pubDate>Wed, 08 Apr 2020 23:36:09 +0800</pubDate><guid>https://sanoon.me/posts/log4j%E6%97%A5%E5%BF%97%E8%84%B1%E6%95%8F/</guid><description>日常开发中，经常性的会遇到安全性问题，其中日志脱敏就是其中一种。下面我们就来看看如何对 Log4j 日志信息实现脱敏。 通常大家都会在 log4j.properties 中定义各种 appender，其中有一项配置信息是输出的格式化信息使用的 Layout 定义。</description></item><item><title>Maven Scope 详解</title><link>https://sanoon.me/posts/mavenscope%E8%AF%A6%E8%A7%A3/</link><pubDate>Wed, 08 Apr 2020 22:27:56 +0800</pubDate><guid>https://sanoon.me/posts/mavenscope%E8%AF%A6%E8%A7%A3/</guid><description>Maven Scope 包含 compile、test、runtime、provided、system、import。其中默认依赖配置项是 compile。那么这几个配置有什么区别，我们来详解一下。 compile 不显示指定 Scope 时，作为默认</description></item><item><title>Spring Cloud Eureka 注册中心</title><link>https://sanoon.me/posts/springcloud%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83eureka/</link><pubDate>Sat, 21 Mar 2020 00:05:42 +0800</pubDate><guid>https://sanoon.me/posts/springcloud%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83eureka/</guid><description>Eureka 是 Netflix 开源的服务注册中心，是Spring Cloud 的重要组成部分，完整的实现了服务注册和服务发现。 Eureka 将数据完全存储于内存中，对于注册的服务本身，需要维持心跳。 下面我们将基于 Spring Cloud ：Hoxton.SR3；Spri</description></item><item><title>Chrome 非安全端口</title><link>https://sanoon.me/posts/chrome%E9%9D%9E%E5%AE%89%E5%85%A8%E7%AB%AF%E5%8F%A3/</link><pubDate>Fri, 20 Mar 2020 19:34:47 +0800</pubDate><guid>https://sanoon.me/posts/chrome%E9%9D%9E%E5%AE%89%E5%85%A8%E7%AB%AF%E5%8F%A3/</guid><description>今天给一个 Web 服务配置了 6000 端口，使用 chrome 访问不了，换了 IE 浏览器正常，深究之后得知，chrome 浏览器会将一些协议的端口视为非安全端口。 错误信息 ERR_UNSAFE_PORT 解决方案 更换端口 右键单击Chrome快捷方式 ➡ 目标 ➡ 在后面添</description></item><item><title>Spring Cloud 介绍</title><link>https://sanoon.me/posts/springcloud%E4%BB%8B%E7%BB%8D/</link><pubDate>Fri, 20 Mar 2020 00:00:12 +0800</pubDate><guid>https://sanoon.me/posts/springcloud%E4%BB%8B%E7%BB%8D/</guid><description>最近使用 SpringBoot 快速落地了一个样机的 demo，一旦某个服务挂掉之后，整个服务将不可用，思考之余，决定学习下现下流行的微服务框架 Spring Cloud。 Spring Cloud 概览 Spring Cloud 为开发人员提供了一系列用于构建分布式系统的常用的组件，</description></item><item><title>Yarn 配置</title><link>https://sanoon.me/posts/yarn%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 19 Mar 2020 22:33:04 +0800</pubDate><guid>https://sanoon.me/posts/yarn%E9%85%8D%E7%BD%AE/</guid><description>今天在使用 Yarn 命令 install 的时候，一直下载不下来，因为公司网络环境复杂，必须通过代理才能访问，尝试设置了代理之后，错误依旧。在大量搜索之后发现缺少一个关键性配置信息，记录在此。 错误信息 There appears to be trouble with your network connection. Retrying... 设置</description></item><item><title>JVM 指令与工具</title><link>https://sanoon.me/posts/jvm%E6%8C%87%E4%BB%A4%E4%B8%8E%E5%B7%A5%E5%85%B7/</link><pubDate>Wed, 18 Mar 2020 23:32:34 +0800</pubDate><guid>https://sanoon.me/posts/jvm%E6%8C%87%E4%BB%A4%E4%B8%8E%E5%B7%A5%E5%85%B7/</guid><description>查看 Java 进程列表: jps jps 查看 gc 信息: jstat jstat -gcutil PID 毫秒数 jstat -gc PID 毫秒数 jstat -gcnew PID jstat -gcold PID 查看线程信息: jstack jstack PID 查看内存状态: jmap # 导出到文件中，需要使用其它工具打开 jmap -dump:file=file PID # 直接在控制台查看 jmap -heap PID 查看进程扩展参数信息：jin</description></item><item><title>Maven 跳过某个子 Module 的构建</title><link>https://sanoon.me/posts/maven%E8%B7%B3%E8%BF%87%E6%9F%90%E4%B8%AA%E5%AD%90module%E7%9A%84%E6%9E%84%E5%BB%BA/</link><pubDate>Wed, 18 Mar 2020 21:58:33 +0800</pubDate><guid>https://sanoon.me/posts/maven%E8%B7%B3%E8%BF%87%E6%9F%90%E4%B8%AA%E5%AD%90module%E7%9A%84%E6%9E%84%E5%BB%BA/</guid><description>当项目中出现某个稳定的模块，不需要每次编译的时候重复去构建它，我们可以使用如下的命令去跳过它 mvn -pl '!父Module/子Module' clean install 假如你使用的是 IDEA 插件 Maven Helper，那需要去掉引号 mvn -pl !父Mod</description></item><item><title>Docker 使用指南</title><link>https://sanoon.me/posts/docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 06 Mar 2020 20:27:56 +0800</pubDate><guid>https://sanoon.me/posts/docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid><description>查看镜像列表 docker images docker images -a 搜索镜像 docker search java 下载镜像 docker pull java 运行容器 docker run 镜像ID 停止容器 docker stop 容器ID # 批量停止容器 docker stop `docker ps -a -q` 重启容器 docker restart 容器ID 启动容器 docker start 容器ID 删除容器 docker rm -f 容器ID # 批量删除容器 docker rm `docker ps</description></item><item><title>PicGo 配置 Github 图床</title><link>https://sanoon.me/posts/picgo%E9%85%8D%E7%BD%AEgithub/</link><pubDate>Tue, 03 Mar 2020 23:57:49 +0800</pubDate><guid>https://sanoon.me/posts/picgo%E9%85%8D%E7%BD%AEgithub/</guid><description>在写博客的过程中，大家避免不了要使用截图。在 Markdown 中使用该图片，必须要有链接地址。 保存截图的过程比较麻烦，想起之前看过 Mac 上有款名为 PicGo 的软件可以解决这个问题。 Mac 安装 PicGo 执行以下命令 brew cask install picgo 创建 Github 图片库 参见 生成</description></item><item><title>博客图床</title><link>https://sanoon.me/posts/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</link><pubDate>Fri, 28 Feb 2020 23:13:02 +0800</pubDate><guid>https://sanoon.me/posts/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</guid><description>博客图片一直存储在 Github 上，国内访问一直很慢，因此需要寻找合适的图床。在看了国内七牛、又拍云、贴图库等存储库之后，终因为备案、限量等各种原因，在快要放弃的时候发现了 jsDelivr 这个项目。 该项目旨在帮助大家使用 Github 作为</description></item><item><title>IDEA 加载大文件</title><link>https://sanoon.me/posts/idea%E5%8A%A0%E8%BD%BD%E5%A4%A7%E6%96%87%E4%BB%B6/</link><pubDate>Fri, 28 Feb 2020 21:38:27 +0800</pubDate><guid>https://sanoon.me/posts/idea%E5%8A%A0%E8%BD%BD%E5%A4%A7%E6%96%87%E4%BB%B6/</guid><description>最近在项目开发过程中，遇到 gRPC 生成的大文件，无法加载。解决方案如下： 打开此文件 Help –&amp;gt; Edit Custom Properties 修改配置大小为 10 M： idea.max.intellisense.filesize=10240</description></item><item><title>Maven 多线程编译</title><link>https://sanoon.me/posts/maven%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E8%AF%91/</link><pubDate>Thu, 27 Feb 2020 21:29:32 +0800</pubDate><guid>https://sanoon.me/posts/maven%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E8%AF%91/</guid><description>公司的项目比较大，编译缓慢，耗时 2 个多小时。除了配置各种编译跳过选项后，也需要 1 个小时左右的时间。 maven clean install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Dfindbugs.skip=true 在翻阅 Maven 命令时，发现 Maven 3.0 以上的版本是支持多线程编译的，使用 -T 的命令可以指定多线程的数量。</description></item><item><title>酸汤面</title><link>https://sanoon.me/posts/%E9%85%B8%E6%B1%A4%E9%9D%A2/</link><pubDate>Sat, 22 Feb 2020 10:54:39 +0800</pubDate><guid>https://sanoon.me/posts/%E9%85%B8%E6%B1%A4%E9%9D%A2/</guid><description>分享下做酸汤面片的步骤 韭菜切碎，西红柿切块，老豆腐切丁，鸡蛋打碎，木耳和黄花热水泡开 热锅冷油，稍微冒烟，下豆腐，小火慢炒，半熟时加盐和十三香，大火翻炒，洗锅备用 热锅冷油，稍微冒烟，下西红柿，翻炒出汁，</description></item><item><title>半日闲</title><link>https://sanoon.me/posts/%E5%8D%8A%E6%97%A5%E9%97%B2/</link><pubDate>Sat, 15 Feb 2020 23:55:21 +0800</pubDate><guid>https://sanoon.me/posts/%E5%8D%8A%E6%97%A5%E9%97%B2/</guid><description>由于众所周知的原因，在家快憋疯的贾老师和我趁着周末 全副武装 的驱车到县郊外散心，偶然摄得此景。 天气也是给力的紧，烦闷的情绪也就去了大半，贾老师也不时的笑笑。 想来此时能看到这悠悠蓝天，也是一种奢侈。 题鹤林</description></item></channel></rss>